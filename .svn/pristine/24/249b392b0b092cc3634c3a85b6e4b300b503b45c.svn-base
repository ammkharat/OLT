using System;
using System.Collections.Generic;
using Com.Suncor.Olt.Common.Domain;
using Com.Suncor.Olt.Common.Domain.WorkPermit;
using Com.Suncor.Olt.Common.Extension;
using Com.Suncor.Olt.Common.Utility;

namespace Com.Suncor.Olt.Common.DTO
{
    [Serializable]
    public class PermitRequestMudsDTO : BasePermitRequestDTO, IHasStatus<PermitRequestCompletionStatus>
    {
        private readonly Date startDate;

        public PermitRequestMudsDTO(
            long? id,
            WorkPermitMudsType workPermitType,
            List<string> functionalLocationNames,
            Date startDate,
            Date endDate,
            string workOrderNumber,
            string operationNumber,
            string trade,
            string requestedByGroup,
            string description,
            DataSource dataSource,
            string lastImportedByFullnameWithUserName,
            DateTime? lastImportedDateTime,
            string lastSubmittedByFullnameWithUserName,
            DateTime? lastSubmittedDateTime,
            long createdByUserId,
            DateTime lastModifiedDateTime,
            string lastModifiedByFullnameWithUserName,
            PermitRequestCompletionStatus completionStatus, string nbTravail, bool formationCheck, string noms, string noms_1, string noms_2, string noms_3, string surveilant) :
                base(
                id, endDate, description, dataSource, lastImportedByFullnameWithUserName, lastImportedDateTime,
                lastSubmittedByFullnameWithUserName, lastSubmittedDateTime,
                createdByUserId, lastModifiedDateTime, lastModifiedByFullnameWithUserName)
        {
            WorkPermitType = workPermitType;
            FunctionalLocationNames = functionalLocationNames;
            Trade = trade;
            RequestedByGroup = requestedByGroup;
            this.startDate = startDate;

            WorkOrderNumber = workOrderNumber;
            OperationNumber = operationNumber;
            CompletionStatus = completionStatus;
            
        }

        public PermitRequestMudsDTO(PermitRequestMuds request) : this(
            request.Id,
            request.WorkPermitType,
            request.FunctionalLocations.FullHierarchyList(false),
            request.StartDate,
            request.EndDate,
            request.WorkOrderNumber,
            request.OperationNumber,
            request.Trade,
            request.RequestedByGroup == null ? null : request.RequestedByGroup.Name,
            request.Description,
            request.DataSource,
            request.LastImportedByUser == null ? null : request.LastImportedByUser.FullNameWithUserName,
            request.LastImportedDateTime,
            request.LastSubmittedByUser == null ? null : request.LastSubmittedByUser.FullNameWithUserName,
            request.LastSubmittedDateTime,
            request.CreatedBy.IdValue,
            request.LastModifiedDateTime,
            request.LastModifiedBy.FullNameWithUserName,
            request.CompletionStatus,
            request.NbTravail,
            request.Formation,
            request.Noms,
// Added By Vibhor : DMND0010816 -MUDS - Implement OLT Work permit
            request.Noms_1,
            request.Noms_2,
            request.Noms_3,
            request.Surveilant)
        {
        }

        public override Date StartDate
        {
            get { return startDate; }
        }

        public WorkPermitMudsType WorkPermitType { get; private set; }
        public List<string> FunctionalLocationNames { get; private set; }

        [IncludeInSearch]
        public string OperationNumber { get; private set; }

        [IncludeInSearch]
        public string RequestedByGroup { get; private set; }

        [IncludeInSearch]
        public string Trade { get; private set; }

        [IncludeInSearch]
        public string FunctionalLocationNamesAsString
        {
            get { return FunctionalLocationNames.BuildCommaSeparatedList(); }
        }

        public PermitRequestCompletionStatus CompletionStatus { get; private set; }

        [IncludeInSearch]
        public PermitRequestCompletionStatus Status
        {
            get { return CompletionStatus; }
        }

        public void AddFunctionalLocation(string functionalLocationName)
        {
            FunctionalLocationNames.AddAndSort(functionalLocationName);
        }
    }
}