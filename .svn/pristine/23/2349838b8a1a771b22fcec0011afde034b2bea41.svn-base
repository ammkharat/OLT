using System.Collections.Generic;
using System.Data.SqlClient;
using Com.Suncor.Olt.Common.Domain;
using Com.Suncor.Olt.Common.Domain.WorkPermit;
using System.Data;

namespace Com.Suncor.Olt.Remote.DataAccess.Domain
{
    public class GenericTemplateApprovalDao : AbstractManagedDao, IGenericTemplateApprovalDao
    {
        private const string INSERT_STORED_PROCEDURE = "InsertFormGenericTemplateApprover";
        private const string REMOVE_STORED_PROCEDURE = "RemoveFormGenericTemplateApprover";
        private const string UPDATE_STORED_PROCEDURE = "UpdateFormGenericTemplateApprover";
        private const string QUERY_BY_SITE_STORED_PROCEDURE = "QueryFormGenericTemplateApproverBySite";
        private const string QUERY_FOR_EGENERICFORMSSITE_STORED_PROCEDURE = "QueryFormGenericTemplateEFormsBySite";
        private const string UPDATE_TEMPLATE_STORED_PROCEDURE = "UpdateFormGenericTemplateHeader";//
        private readonly ISiteDao siteDao;

        public GenericTemplateApprovalDao() 
        {
            siteDao = DaoRegistry.GetDao<ISiteDao>();
        }

        public List<GenericTemplateApproval> QueryBySite(long siteId, long plantId, long formTypeId)
        {
            SqlCommand command = ManagedCommand;
            command.AddParameter("@SiteId", siteId);
            command.AddParameter("@PlantId", plantId);
            command.AddParameter("@FormTypeId", formTypeId);
            return
                command.QueryForListResult<GenericTemplateApproval>(PopulateInstance, QUERY_BY_SITE_STORED_PROCEDURE);
        }

        public List<GenericTemplateApproval> QueryForEGenericForms(long siteId, long plantId)
        {
            SqlCommand command = ManagedCommand;
            command.AddParameter("@SiteId", siteId);
            command.AddParameter("@PlantId", plantId);
            return
                command.QueryForListResult<GenericTemplateApproval>(PopulateInstance, QUERY_FOR_EGENERICFORMSSITE_STORED_PROCEDURE);
        }

        public GenericTemplateApproval Insert(GenericTemplateApproval contractor)
        {
            SqlCommand command = ManagedCommand;
            SqlParameter idParameter = command.AddIdOutputParameter();
            command.Insert(contractor, AddInsertParameters, INSERT_STORED_PROCEDURE);
            contractor.Id = long.Parse(idParameter.Value.ToString());
            return contractor;
        }

        public void Remove(GenericTemplateApproval contractor)
        {
            ManagedCommand.ExecuteNonQuery(contractor, REMOVE_STORED_PROCEDURE, AddRemoveParameters);
        }

        public void Update(GenericTemplateApproval contractor)
        {
            ManagedCommand.Update(contractor, AddUpdateParameters, UPDATE_STORED_PROCEDURE);
        }

        private static void AddInsertParameters(GenericTemplateApproval contractor, SqlCommand command)
        {
            AddCommonParameters(command, contractor);
        }

        private static void AddCommonParameters(SqlCommand command, GenericTemplateApproval contractor)
        {
            command.AddParameter("@Name", contractor.CompanyName);
            command.AddParameter("@FormTypeId",  contractor.FormTypeId);
            command.AddParameter("@PlantId", contractor.PlantId);
            command.AddParameter("@SiteId", contractor.Site.IdValue);
           
           
        }

        private static void AddRemoveParameters(GenericTemplateApproval contractor, SqlCommand command)
        {
            command.AddParameter("@Id",  contractor.Id);
        }

        private static void AddUpdateParameters(GenericTemplateApproval contractor, SqlCommand command)
        {
            command.AddParameter("@Id",  contractor.Id);
            AddCommonParameters(command, contractor);
        }

        private GenericTemplateApproval PopulateInstance(SqlDataReader reader)
        {
            long? id = reader.Get<long?>("Id");
            long formTypeId = reader.Get<long>("FormTypeId");
            long plantId = reader.Get<long>("PlantId");
            string Name = reader.Get<string>("Name");
            Site site = siteDao.QueryById(reader.Get<long>("SiteId"));
            //DMND0009363-#950321920-Mukesh
          GenericTemplateApproval objTemplate=new GenericTemplateApproval(id, Name, site, formTypeId, plantId);
          if (IsclumnExistinReader(reader, "isNeverEnd"))
              objTemplate.ShowneverEnd = reader.Get<bool>("isNeverEnd");

            return objTemplate;
          // return new GenericTemplateApproval(id, Name, site, formTypeId, plantId);        
            
        }

        //DMND0009363-#950321920-Mukesh
        public void UpdateTemplateHeader(GenericTemplateApproval contractor)
        {
            ManagedCommand.Update(contractor, UpdateTemplateCommonParameters, UPDATE_TEMPLATE_STORED_PROCEDURE);
        }
        private static void UpdateTemplateCommonParameters(GenericTemplateApproval TemplateHeader, SqlCommand command)
        {
           command.AddParameter("@FormTypeId", TemplateHeader.FormTypeId);
            command.AddParameter("@PlantId", TemplateHeader.PlantId);
            command.AddParameter("@SiteId", TemplateHeader.Site.IdValue);
            command.AddParameter("@isNeverEnd", TemplateHeader.ShowneverEnd);


        }
        private static bool IsclumnExistinReader(SqlDataReader dr, string strColumnName)
        {
            dr.GetSchemaTable().DefaultView.RowFilter = string.Format("ColumnName= '{0}'", strColumnName);
            if (dr.GetSchemaTable().DefaultView.Count > 0)
            {
                return true;
            }
            return false;
        }
        //End DMND0009363-#950321920-Mukesh
       
    }


}