using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Com.Suncor.Olt.Common.DTO.Excursions;
using Com.Suncor.Olt.Common.Extension;
using DevExpress.XtraSplashScreen;
using Infragistics.Win;
using Infragistics.Win.UltraWinGrid;

namespace Com.Suncor.Olt.Client.Forms
{
    public partial class ExcursionResponseForm : BaseForm, IExcursionResponseForm
    {
        private string lastUpdatedComment;
        private string toeOpmHistoryUrl;
        private readonly SplashScreenManager splashScreenManager;

        public ExcursionResponseForm()
        {
            components = null;
            InitializeComponent();
            excursionsToUpdateOltGrid.DisplayLayout.Override.RowSizing = RowSizing.AutoFree;
            excursionsToUpdateOltGrid.DisplayLayout.Override.RowSizingAutoMaxLines = 3;
            excursionsToUpdateOltGrid.DisplayLayout.Override.CellMultiLine = DefaultableBoolean.True;
            excursionsToUpdateOltGrid.DisplayLayout.Override.CellAppearance.TextTrimming = TextTrimming.EllipsisWord;
            excursionsToUpdateOltGrid.AfterCellUpdate += ExcursionsToUpdateOltGridOnAfterCellUpdate;
            excursionsToUpdateOltGrid.AfterSelectChange += ExcursionsToUpdateOltGridOnAfterSelectChange;
            viewTrendButton.Click += ViewTrendButtonOnClick;
            toeDefinitionHistoryButton.Click += ToeHistoryButtonOnClick;
            excursionsToUpdateOltGrid.AfterCellUpdate += ExcursionsToUpdateOltGridOnAfterCellUpdate;
            copyLastResponseButton.Click += CopyLastResponseButtonOnClick;
            toeEngineerCommentYes.Click += ToeEngineerCommentYesNoOnClick;
            toeEngineerCommentNo.Click += ToeEngineerCommentYesNoOnClick;
            cancelButton.Click += HandleCancelButtonClicked;
            saveAndCloseButton.Click += HandleSaveButtonClicked;
            splashScreenManager = new SplashScreenManager(ParentForm, typeof(WaitForm), true, true);

        }

        private ExcursionResponseEditingGridRowDTO SelectedExcursionResponseRow
        {
            get
            {
                var ultraGridRow = excursionsToUpdateOltGrid.ActiveRow;
                if (ultraGridRow == null) return null;
                var excursionResponseEditingGridRowDTO = ultraGridRow.ListObject as ExcursionResponseEditingGridRowDTO;
                return excursionResponseEditingGridRowDTO;
            }
        }

        public event EventHandler SaveButtonClicked;
        public event EventHandler CancelButtonClicked;

        public void ClearErrorProviders()
        {
            errorProvider.Clear();
        }

        public string ExcursionToeName
        {
            set { excursionToeNameLabelValue.Text = value; }
        }

        public string CurrentTagValue
        {
            set
            {
                if (InvokeRequired)
                {
                    BeginInvoke(new MethodInvoker(delegate { currentTagValueLabelValue.Text = value; }));
                }
                else
                {
                    currentTagValueLabelValue.Text = value;
                }
            }
        }

        public string ExcursionHistorianTag
        {
            set { excursionHistorianTagValueLabel.Text = value; }
            get { return excursionHistorianTagValueLabel.Text; }
        }

        public string ExcursionUnitOfMeasure
        {
            set { excursionUnitValueLabel.Text = value; }
        }

        public string ToeOpmHistoryUrl
        {
            set
            {
                toeOpmHistoryUrl = value;
                toeDefinitionHistoryButton.Enabled = !value.IsNullOrEmptyOrWhitespace();
            }
        }

        public bool CopyToLog
        {
            get { return copyResponseToLogCheckBox.Checked; }
        }

        public bool EditEnabled
        {
            set
            {
                excursionsToUpdateOltGrid.DisplayLayout.Bands[0].Columns["ExcursionResponseComment"].CellActivation =
                    (value) ? Activation.AllowEdit : Activation.NoEdit;
                copyResponseToLogCheckBox.Enabled = value;
                copyLastResponseButton.Enabled = value;
                blindsRequiredPanel.Enabled = value;
                saveAndCloseButton.Enabled = value;
            }
        }

        public string ToeFloc
        {
            set { toeFunctionalLocationValueLabel.Text = value; }
        }

        public DateTime? ToePublishDate
        {
            set { toePublishDateValueLabel.Text = value.ToShortDateAndTimeStringOrEmptyString(); }
        }

        public bool IsToeDefinitionCommentingEnabled
        {
            set
            {
                toeEngineerCommentYes.Enabled = value;
                toeEngineerCommentNo.Enabled = value;
            }
            get { return toeEngineerCommentYes.Enabled; }
        }

        public bool HasCommentForEngineer
        {
            set
            {
                toeEngineerCommentYes.Checked = value;
                toeEngineerCommentNo.Checked = !value;
                toeDefinitionOltCommentsForEngineerTextBox.Enabled = value;
            }
            get { return toeEngineerCommentYes.Checked; }
        }

        public string ToeCommentForEngineer
        {
            set { toeDefinitionOltCommentsForEngineerTextBox.Text = value; }
            get { return toeDefinitionOltCommentsForEngineerTextBox.Text; }
        }

        public string ToeCauseOfDeviation
        {
            set { toeCauseOfDeviationOltTextBox.Text = value; }
        }

        public string ToeReferenceDocuments
        {
            set { documentLinksControl.Text = value; }
        }

        public string ToeConsequencesOfDeviation
        {
            set { toeConsequencesOfDeviationOltTextBox.Text = value; }
        }

        public string ToeCorrectiveActions
        {
            set { toeDefinitionCorrectiveActionOltTextBox.Text = value; }
        }

        public List<ExcursionResponseEditingGridRowDTO> ExcursionsToUpdate
        {
            get { return (List<ExcursionResponseEditingGridRowDTO>) excursionsToUpdateOltGrid.DataSource; }
            set
            {
                excursionsToUpdateOltGrid.DataSource = value;
                excursionsToUpdateOltGrid.ResetBindings();
                viewTrendButton.Enabled = value.Count > 0 && !value.First().OpmTrendUrl.IsNullOrEmptyOrWhitespace();
            }
        }

        public string MostRecentExcursionResponseComment
        {
            set { lastUpdatedComment = value; }
        }

        public void SetErrorForMissingResponses()
        {
            errorProvider.SetError(excursionsToUpdateOltGrid, "All Exursions must have a Response");
        }

        public void SetErrorForMissingToeCommentForEngineer()
        {
            errorProvider.SetError(toeDefinitionOltCommentsForEngineerTextBox,
                "Comment for Engineer is required when Yes is checked");
        }

        public event Action HistoryButtonClicked;

        private void HandleSaveButtonClicked(object sender, EventArgs e)
        {
            if (SaveButtonClicked != null)
            {
                splashScreenManager.ShowWaitForm();
                SaveButtonClicked(sender, e);
                splashScreenManager.CloseWaitForm();
                splashScreenManager.WaitForSplashFormClose();    
            }
        }

        private void HandleCancelButtonClicked(object sender, EventArgs e)
        {
            if (CancelButtonClicked != null)
            {
                CancelButtonClicked(sender, e);
            }
        }

        private void ToeEngineerCommentYesNoOnClick(object sender, EventArgs eventArgs)
        {
            if (!toeDefinitionOltCommentsForEngineerTextBox.Text.IsNullOrEmptyOrWhitespace() &&
                toeEngineerCommentNo.Checked)
            {
                toeDefinitionOltCommentsForEngineerTextBox.Text = null;
            }

            ToggleComments();
        }

        private void ToggleComments()
        {
            toeDefinitionOltCommentsForEngineerTextBox.Enabled = toeEngineerCommentYes.Checked;
        }

        private void CopyLastResponseButtonOnClick(object sender, EventArgs eventArgs)
        {
            if (lastUpdatedComment.IsNullOrEmptyOrWhitespace()) return;
            excursionsToUpdateOltGrid.BeginUpdate();
            var excursions = ExcursionsToUpdate;
            foreach (var excursion in excursions)
            {
                if (excursion.ExcursionResponseComment.IsNullOrEmptyOrWhitespace())
                {
                    excursion.ExcursionResponseComment = lastUpdatedComment;
                }
            }
            ExcursionsToUpdate = excursions;
            excursionsToUpdateOltGrid.EndUpdate();
        }

        private void SetupTrendUrl()
        {
            viewTrendButton.Enabled = SelectedExcursionResponseRow != null &&
                                      !SelectedExcursionResponseRow.OpmTrendUrl.IsNullOrEmptyOrWhitespace();
        }

        private void ExcursionsToUpdateOltGridOnAfterSelectChange(object sender,
            AfterSelectChangeEventArgs afterSelectChangeEventArgs)
        {
            SetupTrendUrl();
        }

        private void ViewTrendButtonOnClick(object sender, EventArgs eventArgs)
        {
            if (SelectedExcursionResponseRow != null &&
                !SelectedExcursionResponseRow.OpmTrendUrl.IsNullOrEmptyOrWhitespace())
            {
                UIUtils.LaunchURL(SelectedExcursionResponseRow.OpmTrendUrl);
            }
        }

        private void ToeHistoryButtonOnClick(object sender, EventArgs eventArgs)
        {
            if (toeOpmHistoryUrl.IsNullOrEmptyOrWhitespace()) return;
            UIUtils.LaunchURL(toeOpmHistoryUrl);
        }


        private void ExcursionsToUpdateOltGridOnAfterCellUpdate(object sender, CellEventArgs cellEventArgs)
        {
            var ultraGridCell = cellEventArgs.Cell;
            ultraGridCell.Row.PerformAutoSize();
            if (ultraGridCell.Column.Key == "ExcursionResponseComment" &&
                !ultraGridCell.Text.IsNullOrEmptyOrWhitespace())
            {
                lastUpdatedComment = ultraGridCell.Text;
            }
        }
    }
}